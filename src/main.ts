import { App, Editor, MarkdownView, Modal, Notice, Plugin, PluginSettingTab, Setting } from 'obsidian';

import { URLDisplaySettingTab } from './settings'
import { URLDisplayView } from './views'
import { VIEW_TYPE, EXTERNAL_URL_PATTERN, EXTERNAL_URL_OBJECT_PATTERN } from './constants'
import { DEFAULT_SETTINGS, URLDisplaySettings, URLObject } from './constants'
import { deduplicateObjectArrByuniId } from "./utils";


export default class URLDisplayPlugin extends Plugin {

	/* ËÆæÁΩÆ */
	settings: URLDisplaySettings;

	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
	}

	async saveSettings() {
		await this.saveData(this.settings);
	}


	/* ËßÜÂõæ */
	// Âà§Êñ≠ËßÜÂõæÊòØÂê¶Â∑≤ÁªèÊâìÂºÄÔºåtrueÂàôÊ∑ªÂä†ÔºåfalseÂàôÂà†Èô§
	/* isOpen = async () => {
		if (this.app.workspace.getLeavesOfType(VIEW_TYPE)[0]) {
			this.app.workspace.detachLeavesOfType(VIEW_TYPE)
		} else {
			// Ê∑ªÂä†Âè∂Â≠êËäÇÁÇπÂà∞Â∑•‰ΩúÂå∫
			await this.app.workspace.getRightLeaf(false).setViewState({
				type: VIEW_TYPE,
				active: true,
			});
			// ÊòæÁ§∫Âè∂Â≠êËäÇÁÇπ
			this.app.workspace.revealLeaf(
				this.app.workspace.getLeavesOfType(VIEW_TYPE)[0]
			);
		}
	} */

	// ‰∏çÁÆ°ËßÜÂõæÊòØÂê¶ÊâìÂºÄ
	activateView = async () => {
		this.app.workspace.detachLeavesOfType(VIEW_TYPE);
		await this.app.workspace.getRightLeaf(false).setViewState({
			type: VIEW_TYPE,
			active: true,
		});

		this.app.workspace.revealLeaf(
			this.app.workspace.getLeavesOfType(VIEW_TYPE)[0]
		);
	}


	/* Â§ÑÁêÜ */
	#activeNoteContent: string;
	activeNoteURL: Array<string>;
	activeNoteURLObject: Array<URLObject>;

	extraceActiveNoteURL = async () => {
		const activeFile = this.app.workspace.getActiveFile();
		this.activeNoteURLObject = [];

		// Ëé∑ÂèñÁ¨îËÆ∞ÂÜÖÂÆπ
		// const md = await this.app.vault.read(activeFile);
		this.#activeNoteContent = await this.app.vault.cachedRead(activeFile);

		// Ëé∑ÂèñURLÂ≠óÁ¨¶‰∏≤Êï∞ÁªÑ
		this.activeNoteURL = this.#activeNoteContent.match(EXTERNAL_URL_PATTERN) || [];

		// Ëé∑ÂèñURLÂØπË±°Êï∞ÁªÑ
		for (const url of this.activeNoteURL) {
			// console.log(url);
			const unmatch = [...url.matchAll(EXTERNAL_URL_OBJECT_PATTERN)]

			// Â§ÑÁêÜÊÉÖÂÜµ1Ôºö"https://obsidian.md/"ÔºàÂΩì‰∏çÂåπÈÖçÊó∂Ëß£ÊûÑ‰∏∫Êï∞ÁªÑÊó∂ÊòØ‰∏Ä‰∏™Á©∫Êï∞ÁªÑÔºâ
			if (unmatch.length === 0) {
				this.activeNoteURLObject.push({ text: "", link: url });
				continue;
			}

			// Â§ÑÁêÜÊÉÖÂÜµ2Ôºö"[]()"
			for (const match of url.matchAll(EXTERNAL_URL_OBJECT_PATTERN)) {
				if (match.groups) {
					this.activeNoteURLObject.push({ text: match.groups.text, link: match.groups.link });
				}
			}
		}

		// ÂéªÈáçURLÔºàÊèí‰ª∂ËÆæÁΩÆÔºâ
		if (this.settings.removeDuplicateURLs) {
			this.activeNoteURLObject = deduplicateObjectArrByuniId(this.activeNoteURLObject, "link");
		}
	};


	async onload() {
		console.clear();
		console.log("loading obsidian-url-display");

		/* ËÆæÁΩÆ */
		await this.loadSettings();
		this.addSettingTab(new URLDisplaySettingTab(this.app, this));

		/* ÂëΩ‰ª§ */
		this.addCommand({
			id: 'open-url-panel',
			name: 'Open URL Panel',
			callback: () => {
				this.activateView();
			}
		});

		/* ËßÜÂõæ */
		this.registerView(
			VIEW_TYPE,
			(leaf) => new URLDisplayView(leaf, this)
		);

		/* ÂäüËÉΩÂå∫ */
		this.addRibbonIcon('external-link', 'Open URL Panel', (evt: MouseEvent) => {
			const activeFile = this.app.workspace.getActiveFile();
			
			// Âà§Êñ≠ÊòØÂê¶‰∏∫.mdÔºåtrueÂàôÊèêÂèñURLÔºåfalseÂàô‰∏çÊâìÂºÄËßÜÂõæÂèëÂá∫ÊèêÁ§∫
			if (activeFile && activeFile.extension && (String(activeFile.extension).toLowerCase() === "md")) {
				this.activateView();
			} else {
				this.app.workspace.detachLeavesOfType(VIEW_TYPE);
				new Notice("It needs to be valid in the .md file üòÑ")
			}
		});

		/* ‰∫ã‰ª∂ */
		this.registerDomEvent(document, 'click', (evt: MouseEvent) => {
			// console.log('click', evt);
		});
	}

	onunload() {
	}

}
